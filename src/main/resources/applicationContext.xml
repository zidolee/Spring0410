<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- ### 1. xml 설정 파일을 활용 하는 방법 ###-->
	<!-- <bean id="tv" class="polymorphism.SamsungTv" init-method="initMethod" destroy-method="destroyMethod"
	 lazy-init="true"/> --> <!-- SamsungTV 인스턴스 생성  -->
	
	<!-- 1. 생성자 인젝션  -->
	<!-- <bean id="tv" class="polymorphism.SamsungTv">
		<constructor-arg index="0" ref="apple" />
		<constructor-arg index="1" value="3200000" />
	</bean> --> 
	
	<!-- 2. setter 인젝션 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTv">
		<property name="speaker" ref="apple" />
		<property name="price" value="3000000"></property>
	</bean> -->
	
	<!-- 3. setter 인젝션  p 네임스페이스 활용 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTv" p:speaker-ref="sony" p:price="2700000"/>
	<bean id="sony" class="polymorphism.SonySpeaker" />
	
	<bean id="apple" class="polymorphism.AppleSpeaker" /> -->
	
	<!-- ### 2. 어노테이션을 활용 하는 방법 ###-->
	<!-- <context:component-scan base-package="polymorphism" /> -->
	<!-- <bean id="tv" class="polymorphism.LgTv"></bean> --> <!-- 어노테이션 쓰면 없어도 됨  -->
	<!-- <bean class="polymorphism.SonySpeaker"/> -->
	
	
	<!-- ********************************************************************************* -->
	<!-- Board 테이블 사용 -->
	<!-- 어노테이션 기반 -->
	<!-- <context:component-scan base-package="com.springbook.biz" /> -->
	
	<!-- 설정 파일(xml)기반 -->
	<!-- Setter 인젝션 (Property 엘리먼트 사용) -->
	<!-- <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO"></property>
	</bean> -->
	
	<!-- Setter 인젝션 (p namespace) -->
	<!-- <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl" p:userDAO-ref="userDAO" /> -->
	
	<!-- <bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"></bean> -->
	
	
	<!-- ********************************************************************************* -->
	<!--  AOP -->
	<context:component-scan base-package="com.springbook.biz" />
	<!-- 143 ~ 170 -->
	<!-- <bean id="log" class="com.springbook.biz.common.LogAdvice"/>
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))" />
		
		<aop:aspect ref="log">
			<aop:before pointcut-ref="getPointcut" method="printLog"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- 172, 185 before advice -->
	<bean id="before" class="com.springbook.biz.common.BeforeAdvice" />
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		
		<aop:aspect ref="before">
			<aop:before pointcut-ref="allPointcut" method="beforeLog"/>
		</aop:aspect>
	</aop:config>
	
	<!-- 174 after returning advice -->
	<!-- <bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"/>
	<aop:config>
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))" />
		
		<aop:aspect ref="afterReturning">
			<aop:after-returning pointcut-ref="getPointcut" method="afterLog"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- 176 after throwing advice -->
	<!-- <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"/>
	<aop:config>
		<aop:pointcut id="allPointCut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointCut" method="exeptionLog"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- 178, after advice -->
	<!-- <bean id="after" class="com.springbook.biz.common.AfterAdvice"/>
	
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		
		<aop:aspect ref="after">
			<aop:after pointcut-ref="allPointcut" method="finallylog"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- 180, around advice -->
	<!-- <bean id="around" class="com.springbook.biz.common.AroundAdvice"/>
	
	<aop:config>
		<aop:pointcut id="allPointCut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointCut" method="aroundLog"/>
		</aop:aspect>
	</aop:config> -->	
</beans>